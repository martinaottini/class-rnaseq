RNA-SEQ

Scaricare il Dataset indicato dal Prof da Kirotesting, poi aprire i containers
Bisogna capire la compartimentalizzazione delle cartelle presenti (se sono dentro Datiesame oppure no)
Dopo di che si fa l’upload da dati_rstudio del dataset precedentemente scaricato: tasto destro sulla cartella e poi schiaccio upload.


Vado in class-bsa del prof, lezione 20 e da li seguo il codice di rnaseq_counting

cd /home/rstudio/dati_rstudio
mkdir -p rawdata
tar -xvzf /home/rstudio/datiesame/data_rnaseq.tar.gz -C rawdata/

CREAZIONE DEL REPORT
In alto a sinistra andare su File-New file-R markdown-dare il nome al file, inserire il proprio nome come autore e metterlo come file PDF-dopo di che si schiaccia okay. 
Comparirà in alto a sinistra come uno script; successivamente una volta fatto per scaricarlo si schiaccia Knit e poi una volta che comparirà si schiaccerà download in alto a destra. Infine prima di essere caricato nella sezione “Compito” su Kirotesting bisognerà dezipparlo e salvarlo come PDF. 

### check if you can execute salmon by typing "salmon" on the terminal
## sometimes it fails on RStudio terminal, on CodeSpaces while it works on GitPod
## export PATH=${PATH}:/usr/local/bin

cd rawdata 

for sample in `ls *_1.fasta.gz`
do
index="/home/rstudio/datiesame/datasets_reference_only/trascriptome/chr21_transcripts_index"
name=${sample%_1.fasta.gz}
echo "quantifying $name"
salmon quant \
-p 2 \
-i $index \
-l IU \
-1 "${name}_1.fasta.gz" -2 "${name}_2.fasta.gz" \
--validateMappings \
-o "${name}.quant"
echo -e "$name done now\n"
done
 
### let's inspect a quantification file
 
cd sample_01.quant
head quant.sf
 
 
 
##ora mi sposto su console ed eseguo: rnaseq_differentialexpression.R
 
library(DESeq2)
library(tximport)
library(tidyverse)
library(pheatmap)
library(clusterProfiler)
library(DOSE)
library(org.Hs.eg.db)
 
###################################
## PREPARE DATASET CONDITIONS #####
###################################
 
setwd("/home/rstudio/dati_rstudio")
 
dataset <- tibble(
  sample = c("sample_01",
             "sample_02",
             "sample_03",
             "sample_04",
             "sample_05",
             "sample_06"),
  condition = c(rep("control", 3),
                rep("case", 3))
)
tx2gene <- read_tsv("/home/rstudio/datiesame/datasets_reference_only/trascriptome/gencode.v29.transcripts_no-vers_chr21_tx2gene.txt")
 
 
##################################
#### READ LOCAL FILES IN ##########
###################################  
 
files <- file.path("/home/rstudio/dati_rstudio/rawdata/", paste0(dataset$sample,".quant"), "quant.sf")
names(files) <- dataset$sample
 
txi <- tximport(files, type = "salmon", tx2gene = tx2gene)
 
colnames(txi$counts)
rownames(dataset) <- colnames(txi$counts)
 
dds <- DESeqDataSetFromTximport(txi, dataset, ~condition)
 
###################################
## PREFILTER MIN COUNTS >10 #####
###################################
 
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
 
### make sure base level is control
dds$condition <- relevel(dds$condition, ref = "control")
 
 
###################################
##### DIFFERENTIAL EXPRESSION #####
###################################
 
dds <- DESeq(dds)
 
 
###################################
## EXTRACT ANALYSIS RESULTS #####
###################################
 
res <- results(dds)
resOrdered <- res[order(res$pvalue),]
 
## writeLines(summary(res), "differential_expression_summary.txt")
 
plotMA(res, ylim=c(-3,3))
 
plotDispEsts(dds)
 
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
 
###################################
## WRITE RESULTS OF ANALYSIS #####
###################################
 
resdata <- as_tibble(resOrdered)
resdata$gene <- rownames(resOrdered)
write_tsv(resdata, "analysis_results.tsv")
 
save.image("deseq2_analysis.RData")
 
##Apro I risultati : resdata e copio i più differenziati 
 
 
##Vado alla lezione 21 e copio codice e ‘run’
 
  ############################################
## CLUSTERING ##############################
############################################
 
ntd <- normTransform(dds)
select <- order(rowMeans(counts(dds,normalized=TRUE)),
                decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition")])
 
pheatmap(assay(ntd)[select,],
         cluster_cols=FALSE, annotation_col=df$condition)
 
plotPCA(ntd, intgroup=c("condition"))
 
save.image("deseq2_analysis.RData")
 
 
 
# Vado alla lezione 22
 
 
###################################
## EXTRACT SIGNIFICANT GENES #####
###################################
 
universe <- AnnotationDbi::select(org.Hs.eg.db,
                                  keys = keys(org.Hs.eg.db),
                                  columns = c('ENTREZID','SYMBOL','ENSEMBL','ENSEMBLTRANS'),
                                  keytype = 'ENTREZID')
 
sig_genes <- resdata$gene[which(resdata$padj<0.05)]
entrez_genes_sig <- unique(universe[which(universe$ENSEMBL %in% sig_genes),]$ENTREZID)
 
pvalue_ens_genes <- resdata$padj[which(resdata$padj<0.05)]
names(pvalue_ens_genes)<-sig_genes
 
pvalue_entrez_genes <- resdata$padj[which(resdata$padj<0.05)]
names(pvalue_entrez_genes) <- entrez_genes_sig
 
 
###################################
## ENRICH GO ANALYSIS #####
###################################
 
ego <- enrichGO( gene = sig_genes,
                 universe = unique(tx2gene$GENEID),
                 OrgDb = org.Hs.eg.db,
                 keyType = 'ENSEMBL',
                 ont = "BP",
                 pAdjustMethod = "BH",
                 pvalueCutoff  = 0.05)
 
## writeLines(summary(ego), "enrich_GO_results.txt") (RICORDATI DI VARIARE IL NUMERO DELLE CATEGORIE DA 30 A 10)
 
pdf("plots_ego.pdf")
dotplot(ego, showCategory=10)    
dev.off()
 
pdf("plots_network-ego.pdf")
cnetplot(ego, foldChange=resdata$log2FoldChange[which(resdata$padj<0.5)])
dev.off()
 
###################################
## DISGNET ANALYSIS #####
###################################
 
## we need to unpack the file we have to read first
## use the terminal
## cd /home/rstudio/datiesame/datasets_reference_only/trascriptome
## gunzip all_gene_disease_associations.tsv.gz
 
gda <- read_tsv(gzfile("/home/rstudio/datiesame/datasets_reference_only/trascriptome/all_gene_disease_associations.tsv.gz"))
 
disease2gene=gda[, c("diseaseId", "geneId")]
disease2name=gda[, c("diseaseId", "diseaseName")]
 
disgnet = enricher(entrez_genes_sig, TERM2GENE=disease2gene, TERM2NAME=disease2name)
 
## writeLines(summary(disgnet), "summary_disgnet.txt")
 
cnetplot(disgnet, foldChange=resdata$log2FoldChange[which(resdata$padj<0.5)])
 
 
save.image("deseq2_analysis.RData")



RISPOSTA ALLE DOMANDE


1.	Geni differenzialmente espresso, p-value e log2 fold-change: trovo queste risposte nel file di resdata. Sta tutto nell’ordinare in maniera decrescente il padj (p-value aggiustata).
2.	10 categorie dell’enrichment: trovo l’elenco nel plots.ego. 
3.	Categorie presenti nel network di enrichment e numero di geni associati: trovo il network nel plot.network-ego.
4.	Percentuale della varianza con le prime 2 PC: lo trovo nel plotsPCA e la percentuale è la somma delle due. 
5.	Malattie che emergono nel network gene-disease e genei associati: trovo le tipologie di malattie e i geni associati nel plots:net-disgnet.
6.	Heatmap: lo trovo nel heatman-plot e di solo i primi 3 campioni sono i campioni di controllo mentre gli ultimi tre sono i casi. Se si ha un dubbio controllare il dataset.
